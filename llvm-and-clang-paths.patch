diff --git a/configure b/configure
index a54e1de985..05b6a91684 100755
--- a/configure
+++ b/configure
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/nix/store/k32c6vzr9g1nln6v0gypz6ar6lqjb63l-bash-5.2-p15/bin/bash
 
 
 if [ ! -d util ]
diff --git a/util/chplenv/chpl_llvm.py b/util/chplenv/chpl_llvm.py
index 5c645fdc05..6c27fef3fe 100755
--- a/util/chplenv/chpl_llvm.py
+++ b/util/chplenv/chpl_llvm.py
@@ -117,6 +117,11 @@ def check_llvm_packages(llvm_config):
     usr_include_clang_ok = False
 
     include_dir = run_command([llvm_config, '--includedir']).strip()
+    if "/nix/store" in include_dir:
+        # Dependencies are managed by Nix, and llvm, clang, etc. are all
+        # different packages. Hence, we cannot rely on clang/Basic/Version.h
+        # residing in the include_dir returned by llvm-config.
+        return (True, '')
     if os.path.isdir(include_dir):
         llvm_header = os.path.join(include_dir,
                                    'llvm', 'Config', 'llvm-config.h')
@@ -327,20 +332,21 @@ def validate_llvm_config():
                   .format(llvm_config, config_error))
 
     if llvm_val == 'system':
-      bindir = get_system_llvm_config_bindir()
-      if not (bindir and os.path.isdir(bindir)):
-          error("llvm-config command {0} provides missing bin dir {1}"
-                .format(llvm_config, bindir))
-      clang_c = get_llvm_clang('c')[0]
-      clang_cxx = get_llvm_clang('c++')[0]
-      if not os.path.exists(clang_c):
-          error("Missing clang command at {0}".format(clang_c))
-      if not os.path.exists(clang_cxx):
-          error("Missing clang++ command at {0}".format(clang_cxx))
-
-      (noPackageErrors, package_err) = check_llvm_packages(llvm_config)
-      if not noPackageErrors:
-        error(package_err)
+        bindir = get_system_llvm_config_bindir()
+        if "/nix/store" not in bindir:
+            if not (bindir and os.path.isdir(bindir)):
+                error("llvm-config command {0} provides missing bin dir {1}"
+                      .format(llvm_config, bindir))
+            clang_c = get_llvm_clang('c')[0]
+            clang_cxx = get_llvm_clang('c++')[0]
+            if not os.path.exists(clang_c):
+                error("Missing clang command at {0}".format(clang_c))
+            if not os.path.exists(clang_cxx):
+                error("Missing clang++ command at {0}".format(clang_cxx))
+
+            (noPackageErrors, package_err) = check_llvm_packages(llvm_config)
+            if not noPackageErrors:
+              error(package_err)
 
 @memoize
 def get_system_llvm_config_bindir():
@@ -365,37 +371,30 @@ def get_llvm_clang_command_name(lang):
     else:
         return 'clang'
 
-@memoize
-def get_system_llvm_clang(lang):
-    clang_name = get_llvm_clang_command_name(lang)
+def get_possible_clang_installation_directories():
+    paths = []
     bindir = get_system_llvm_config_bindir()
-    clang = ''
     if bindir:
-        clang = os.path.join(bindir, clang_name)
-
-        if not os.path.exists(clang):
-            # try /usr/bin/clang-<version> or /usr/bin/clang
-            # since some OSes use that for the clang package
-            paths = [ ]
-
-            usr_bin = "/usr/bin"
-            llvm_config = find_system_llvm_config()
-            llvm_version, ignored_err = check_llvm_config(llvm_config)
+        paths.append(bindir)
+    return paths + os.environ["PATH"].split(":")
 
-            paths.append(os.path.join(usr_bin, clang_name + "-" + llvm_version))
-            paths.append(os.path.join(usr_bin, clang_name))
-
-            for clang2 in paths:
-                if os.path.exists(clang2):
-                    # check that clang --version matches llvm-config --version
-                    clangv = run_command([clang2, '--version']).strip()
-                    llvmv = run_command([llvm_config, '--version']).strip()
+def get_possible_clang_executables(lang):
+    clang_name = get_llvm_clang_command_name(lang)
+    for folder in get_possible_clang_installation_directories():
+        for file in os.listdir(folder):
+            if clang_name in file:
+                yield os.path.join(folder, file)
 
-                    if llvmv in clangv:
-                        clang = clang2
-                        break
+@memoize
+def get_system_llvm_clang(lang):
+    llvm_config = find_system_llvm_config()
+    llvm_version = run_command([llvm_config, '--version']).strip()
 
-    return clang
+    for clang_path in get_possible_clang_executables(lang):
+        clang_version = run_command([clang_path, '--version']).strip()
+        if llvm_version in clang_version:
+            return clang_path
+    return ''
 
 # lang should be C or CXX
 # returns [] list with the first element the clang command,
diff --git a/util/config/compileline b/util/config/compileline
index 96d47624d6..a67e896a30 100755
--- a/util/config/compileline
+++ b/util/config/compileline
@@ -1,4 +1,4 @@
-#!/usr/bin/env sh
+#!/nix/store/k32c6vzr9g1nln6v0gypz6ar6lqjb63l-bash-5.2-p15/bin/sh
 
 # get the chpl home directory
 CWD=$(cd $(dirname $0) ; cd ..; cd ..; pwd)
diff --git a/util/printchplenv b/util/printchplenv
index e2fa398203..95f3ce035e 100755
--- a/util/printchplenv
+++ b/util/printchplenv
@@ -1,4 +1,4 @@
-#!/usr/bin/env sh
+#!/nix/store/k32c6vzr9g1nln6v0gypz6ar6lqjb63l-bash-5.2-p15/bin/sh
 
 # Bash wrapper for printchplenv.py. In order to make relative imports easier we
 # want the real printchplenv.py to live in the chplenv dir. This wrapper just
diff --git a/util/test/checkChplInstall b/util/test/checkChplInstall
index 7d2eb78a88..e3d536237a 100755
--- a/util/test/checkChplInstall
+++ b/util/test/checkChplInstall
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/nix/store/k32c6vzr9g1nln6v0gypz6ar6lqjb63l-bash-5.2-p15/bin/bash
 
 # Validate Chapel installation by compiling and executing an example job.
 #
